variables:
  APP_HOST: env.drasyl.org
  ROLLOUT_STATUS_DISABLED: 1
  AUTO_DEVOPS_DEPLOY_DEBUG: 1

.deploy-base-docker: &deploy-base-docker
  image: drasyl/drasyl-build-images:docker-18.02-docker-compose-1.19-git-2.15.4
  script:
    - sh ./prepare-environment-docker-compose.sh > docker-compose.yml
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker-compose pull
    - docker-compose --project-name ${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_ENVIRONMENT_SLUG} up -d --remove-orphans
  # We don't need cache for stop a environment
  cache: {}

.stop-base-docker: &stop-base-docker
  image: drasyl/drasyl-build-images:docker-18.02-docker-compose-1.19-git-2.15.4
  before_script:
    - git clone -n $CI_REPOSITORY_URL $CI_PROJECT_NAME
    - cd $CI_PROJECT_NAME
    - git checkout $CI_COMMIT_SHA || git checkout master
  script:
    - sh ./prepare-environment-docker-compose.sh > docker-compose.yml
    - docker-compose --project-name ${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_ENVIRONMENT_SLUG} down
  # We don't need cache for stop a environment
  cache: {}

.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v2.0.0"
  dependencies: []

review:
  extends: .auto-deploy
  stage: review
  before_script:
    - sh .gitlab/prepare-auto-deploy-values.yaml.sh > .gitlab/auto-deploy-values.yaml
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
    - auto-deploy persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$APP_HOST
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt, tiller.log]
    when: always
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$REVIEW_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
  tags:
    - kubernetes
    - review

stop_review:
  extends: .auto-deploy
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - auto-deploy initialize_tiller
    - auto-deploy delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$REVIEW_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
      when: manual
  tags:
    - kubernetes
    - review

staging:
  extends: .auto-deploy
  stage: staging
  variables:
    DRASYL_NETWORK_ID: -25421
    DRASYL_PROOF_OF_WORK: 10724607
    DRASYL_PUBLIC_KEY: 03096ae3080a369829a44847d5af1f652bef3f9921e9e1bbad64970babe6d3c502
    # DRASYL_PRIVATE_KEY is defined securely in GitLab CI/CD Settings
    JAVA_OPTS: "-Dio.netty.leakDetectionLevel=PARANOID"
  before_script:
    - sh .gitlab/prepare-auto-deploy-values.yaml.sh > .gitlab/auto-deploy-values.yaml
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
  environment:
    name: staging
    url: http://$CI_ENVIRONMENT_SLUG.$APP_HOST
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
  tags:
    - kubernetes
    - staging

production:
  <<: *deploy-base-docker
  stage: production
  variables:
    APP_IMAGE: "${CI_REGISTRY_IMAGE}:latest"
    APP_DEPLOY_HOST: "production.${APP_HOST}"
    SENTRY_ENVIRONMENT: production
    DRASYL_NETWORK_ID: 1
    DRASYL_PROOF_OF_WORK: 10992904
    DRASYL_PUBLIC_KEY: 025fff6f625f5dee816d9f8fe43895479aecfda187cb6a3330894a07e698bc5bd8
    # DRASYL_PRIVATE_KEY is defined securely in GitLab CI/CD Settings
  environment:
    name: production
    url: https://$APP_HOST
    on_stop: stop_production
  only:
    - master
    - /^v\d+\.\d+/
  when: manual
  tags:
    - docker
    - production

stop_production:
  <<: *stop-base-docker
  stage: cleanup
  variables:
    GIT_STRATEGY: none
    APP_IMAGE: "${CI_REGISTRY_IMAGE}:latest"
    APP_DEPLOY_HOST: "production.${APP_HOST}"
    SENTRY_ENVIRONMENT: production
    DRASYL_NETWORK_ID: 1
    DRASYL_PROOF_OF_WORK: 10992904
    DRASYL_PUBLIC_KEY: 025fff6f625f5dee816d9f8fe43895479aecfda187cb6a3330894a07e698bc5bd8
    # DRASYL_PRIVATE_KEY is defined securely in GitLab CI/CD Settings
  only:
    - master
    - /^v\d+\.\d+/
  when: manual
  environment:
    name: production
    action: stop
  tags:
    - docker
    - production
