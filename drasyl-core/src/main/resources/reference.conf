drasyl {
  # Log level used by the loggers
  # Options: OFF, ERROR, WARN, INFO, DEBUG, TRACE
  loglevel = "WARN"

  # Each node has a unique identity. It is composed of a public-private key pair. The address
  # of the node is derived from the public key. In a future release, messages will be signed
  # and encrypted with it.
  identity {
    # This proof of work can be can be provided as evidence that work has been put into
    # the creation of the identity. (-1 := null)
    proof-of-work = -1

    # This public key can be announced to other nodes so that they can send messages to this
    # node.
    public-key = ""

    # This private key must be kept secret. Otherwise, other nodes may use this node's identity
    # to sign and decrypt messages.
    private-key = ""

    # Path to the file with the identity. Is only read if public-key and private-key are
    # empty. If the file does not exist, a new key pair is generated and stored in the file.
    path = "drasyl.identity.json"
  }

  # The Drasyl Node can start a local server. This allows other nodes to discover it and
  # connect to it and send messages.
  server {
    # If you disable this server, a super peer must be specified. Otherwise no communication
    # with the network is possible!
    enabled = true

    # IP address that server should listen on.
    bind-host = "0.0.0.0"

    # Port that server should listen on. A port number of `0` means that the port number
    # is automatically allocated. However, a random port makes automatic discovery of this node
    # more difficult
    bind-port = 22527

    # Contains a list of (public) URLs where this node can be reached. May be necessary if the
    # node is used behind a proxy. The node sends this list to other nodes so that they can
    # connect to it more easily. If this list remains empty, the Drasyl Node will attempt to
    # discover its (public) endpoints automatically.
    endpoints = [] # example value: ["ws://192.168.178.112:22527", "wss://behind.proxy.de/drasyl/node"]

    # Initializer used by Netty to create a channel for incoming new connections. This value
    # normally does not need to be changed.
    channel-initializer = "org.drasyl.peer.connection.server.DefaultNodeServerChannelInitializer"

    # Determines how long the server waits for a handshake by the client for incoming messages.
    # If the handshake is not performed within the time limit, the connection is terminated.
    # If the limit is too low, slow clients may not be able to connect to the server in time.
    handshake-timeout = 30s

    ssl {
      # When enabled, the server generates temporary self-signed certificates, allowing encrypted
      # communication with clients. For productive environments we recommend to use a reverse
      # proxy which terminates the encryption.
      enabled = false

      # Specifies which TLS protocol versions the server should support.
      protocols = ["TLSv1.3", "TLSv1.2"]
    }

    # The server sends ping messages to all its clients at regular intervals to ensure that they
    # are still properly connected. If there are no pong replies, the connection is considered
    # unhealthy and will be terminated.
    idle {
      # The maximum amount of time the server waits for a single ping message to respond. A
      # value of 0 or less disables ping messages.
      timeout = 1m

      # Specifies how many ping retries the server will make before the connection is considered
      # broken. May not be less than 1 or greater than 32767.
      retries = 3
    }
  }

  # The drasyl node can connect to another node and use it as super peer. All messages that the
  # local node cannot deliver directly are sent to the super peer so that it can attempt delivery.
  super-peer {
    # When enabled, the node attempts to connect to a Super Peer via the endpoints listed below.
    enabled = true

    # List of endpoints that are used to connect to the Super Peer. Entries at the beginning of
    # the list are used first tried.
    endpoints = ["wss://staging.env.drasyl.org"]

    # Optionally, the public key of the Super Peer can be specified here. If a key is specified,
    # the client can verify the identity of the Super Peer.
    public-key = "03096ae3080a369829a44847d5af1f652bef3f9921e9e1bbad64970babe6d3c502"

    # If the connection to the super peer is lost, a new connection is attempted after a some
    # time. Here you can specify a list with the desired delays, which the node will wait before
    # the 1st, 2nd, 3rd, n-th. attempt. The node will never give up trying to re-establish a
    # connection. If the number of attempts exceeds the number of elements in the list, the last
    # element is always used. If the list is empty, the node will not attempt to reconnect to
    # the super peer.
    retry-delays = [0s, 1s, 2s, 4s, 8s, 16s, 32s, 1m]

    # Determines how long the client waits for a handshake confirmation from the super peer.
    # If the handshake is not performed within the time limit, the connection is terminated.
    # If the limit is too low, slow super peers may not be able to confirm in time.
    handshake-timeout = 30s

    # Initializer used by Netty to create a channel for super peer connection. This value
    # normally does not need to be changed.
    channel-initializer = "org.drasyl.peer.connection.superpeer.DefaultSuperPeerClientChannelInitializer"

    # The client sends ping messages to its super peer at regular intervals to ensure that they
    # are still properly connected. If there are no pong replies, the connection is considered
    # unhealthy and will be terminated.
    idle {
      # The maximum amount of time the client waits for a single ping message to respond. A
      # value of 0 or less disables ping messages.
      timeout = 1m

      # Specifies how many ping retries the client will make before the connection is considered
      # broken. May not be less than 1 or greater than 32767.
      retries = 3
    }
  }

  # drasyl can use shared memory to automatically discover and communicate with other nodes running
  # on the same JVM
  intra-vm-discovery.enabled = true

  message {
    # Specifies the maximum length of a single message. The node will discard larger messages before
    # sending and receiving. All nodes in the network should have use the same max length value.
    # Note: An oversized value can quickly lead to an OutOfMemoryError exception. For large payloads the streaming API is recommended.
    max-content-length = 1M

    # Limits the lifespan of a message and prevents it from circulating indefinitely on the network.
    # Every outgoing message starts with the value defined here. Each node decreases the
    # message's hop-limit value before routing it to the next node. If the hop-limit value reaches
    # zero before the message arrives at its destination, then the message is discarded.
    hop-limit = 64
  }

  streaming {
    # The maximum amount of time this node waits for a all chunks of a composed message.
    # If the message does not arrive in this time, the message and all existing and
    # following chunks are dropped.
    composed-message-transfer-timeout = 1m
  }

  # Size of the TCP Flush Buffer. Is used to minimize IO overhead.
  # A high value is good for throughput.
  # A low value is good for latency.
  flush-buffer-size = 256
}
